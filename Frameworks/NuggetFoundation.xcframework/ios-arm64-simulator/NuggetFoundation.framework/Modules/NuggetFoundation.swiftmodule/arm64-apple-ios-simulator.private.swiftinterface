// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NuggetFoundation
import AVFoundation
import Foundation
@_exported import NuggetFoundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @objcMembers final public class ZOSBuildVersionChecker : ObjectiveC.NSObject {
  @objc public static let shared: NuggetFoundation.ZOSBuildVersionChecker
  @objc final public var osVersionString: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var buildNumber: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var isBeta: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var hasContinuationAffectedBeta: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
extension Swift.String {
  public func parameterDictionary(removingPercentEncoding shouldRemovePercentEncoding: Swift.Bool, shouldUseNewMethod: Swift.Bool, mismatchErrorHandler: () -> Swift.Void) -> Swift.Dictionary<Swift.String, Swift.String>
}
final public class WeakRef<T> where T : AnyObject {
  weak final public var wrapped: T?
  final public var hasValue: Swift.Bool {
    get
  }
  public init(_ wrapped: T)
  @objc deinit
}
#if compiler(>=5.3) && $OptionalIsolatedParameters && $ExpressionMacroDefaultArguments
#if compiler(>=5.3) && $SendingArgsAndResults
@inlinable public func withZContinuation<T>(isolation: isolated (any _Concurrency.Actor)? = #isolation, function: Swift.String = #function, _ body: (NuggetFoundation.ZContinuation<T, Swift.Never>) -> Swift.Void) async -> sending T {
    await withUnsafeContinuation(isolation: isolation) { unsafeContinuation in
        switch ZOSBuildVersionChecker.shared.hasContinuationAffectedBeta {
        case true:
            body(.unsafe(unsafeContinuation))
        case false:
            let checkedContinuation = CheckedContinuation(
                continuation: unsafeContinuation,
                function: function
            )
            body(.checked(checkedContinuation))
        }
    }
}
#else
@inlinable public func withZContinuation<T>(isolation: isolated (any _Concurrency.Actor)? = #isolation, function: Swift.String = #function, _ body: (NuggetFoundation.ZContinuation<T, Swift.Never>) -> Swift.Void) async -> T {
    await withUnsafeContinuation(isolation: isolation) { unsafeContinuation in
        switch ZOSBuildVersionChecker.shared.hasContinuationAffectedBeta {
        case true:
            body(.unsafe(unsafeContinuation))
        case false:
            let checkedContinuation = CheckedContinuation(
                continuation: unsafeContinuation,
                function: function
            )
            body(.checked(checkedContinuation))
        }
    }
}
#endif
#endif
#if compiler(>=5.3) && $OptionalIsolatedParameters && $ExpressionMacroDefaultArguments
#if compiler(>=5.3) && $SendingArgsAndResults
@inlinable public func withThrowingZContinuation<T>(isolation: isolated (any _Concurrency.Actor)? = #isolation, function: Swift.String = #function, _ body: (NuggetFoundation.ZContinuation<T, any Swift.Error>) -> Swift.Void) async throws -> sending T {
    try await withUnsafeThrowingContinuation(isolation: isolation) { unsafeContinuation in
        switch ZOSBuildVersionChecker.shared.hasContinuationAffectedBeta {
        case true:
            body(.unsafe(unsafeContinuation))
        case false:
            let checkedContinuation = CheckedContinuation(
                continuation: unsafeContinuation,
                function: function
            )
            body(.checked(checkedContinuation))
        }
    }
}
#else
@inlinable public func withThrowingZContinuation<T>(isolation: isolated (any _Concurrency.Actor)? = #isolation, function: Swift.String = #function, _ body: (NuggetFoundation.ZContinuation<T, any Swift.Error>) -> Swift.Void) async throws -> T {
    try await withUnsafeThrowingContinuation(isolation: isolation) { unsafeContinuation in
        switch ZOSBuildVersionChecker.shared.hasContinuationAffectedBeta {
        case true:
            body(.unsafe(unsafeContinuation))
        case false:
            let checkedContinuation = CheckedContinuation(
                continuation: unsafeContinuation,
                function: function
            )
            body(.checked(checkedContinuation))
        }
    }
}
#endif
#endif
public enum ZContinuation<T, E> where E : Swift.Error {
  case checked(_Concurrency.CheckedContinuation<T, E>)
  case unsafe(_Concurrency.UnsafeContinuation<T, E>)
  public func resume(returning: T)
  public func resume() where T == ()
  public func resume(throwing: E)
}
@objc public protocol ZVideoDataLoggable {
  @objc func handleAccessLogUpdate(notification: Foundation.Notification)
}
public protocol ZVideoDataLogger : NuggetFoundation.ZVideoDataLoggable {
  var player: AVFoundation.AVPlayer? { get }
  var dataUsed: Swift.Int64 { get set }
}
extension NuggetFoundation.ZVideoDataLogger {
  public func addDataLogger()
  public func handleNewAccessLogEntryUpdate(notification: Foundation.Notification)
}
@propertyWrapper final public class ZThreadSafe<T> {
  public init(wrappedValue: T)
  final public var wrappedValue: T {
    get
    set
  }
  @objc deinit
}
final public class ZThreadSafeDict<V, T> where V : Swift.Hashable {
  final public var startIndex: Swift.Dictionary<V, T>.Index {
    get
  }
  final public var count: Swift.Int {
    get
  }
  final public func value(key: V) -> T?
  final public var backingStorage: [V : T] {
    get
  }
  final public var endIndex: Swift.Dictionary<V, T>.Index {
    get
  }
  public init(dict: [V : T] = [V: T]())
  final public func index(after i: Swift.Dictionary<V, T>.Index) -> Swift.Dictionary<V, T>.Index
  final public subscript(key: V) -> T? {
    get
    set(newValue)
  }
  final public subscript(index: Swift.Dictionary<V, T>.Index) -> Swift.Dictionary<V, T>.Element {
    get
  }
  final public func removeValue(forKey key: V)
  final public func removeAll()
  final public func makeIterator() -> Swift.CountableRange<Swift.Int>.Iterator
  final public var values: Swift.Dictionary<V, T>.Values {
    get
  }
  final public func sorted(by areInIncreasingOrder: ((key: V, value: T), (key: V, value: T)) throws -> Swift.Bool) rethrows -> [(key: V, value: T)]
  @objc deinit
}
